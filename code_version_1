import gensim
import scipy
from scipy.spatial import distance
import pandas
from sentence_transformers import SentenceTransformer
import matplotlib.pyplot as plt
import statistics as s
from matplotlib import ticker
import re
import math
import os
#need to research which model would work best
sbert_model = SentenceTransformer('nli-bert-large')


# cosine similarity
#instead do average across 5 sentences pairs (1,2), (1,3), (1,4)...(4,5)
# take out first four
# (2,3), (2,4), (2,5), (2,6) <-- 4th index
# (3,4), (3,5), (3,6) <-- 3rd index
# (4,5), (4,6) <-- 2nd index
# (5,6) <-- 1st index
# take similarities scores array (multiply each by last sentence similarity)
# take utterances array (past 5 utterances)
# mark first occurence only

# getting new set of sentence pairs
def retrieve_next_sentence_array(iteration, index, array):
    count = index
    original_index = index
    reverse_count = 1
    while count != 1:
        print("Array:", array)
        array.insert(index, (array[index - 1][0], array[index-1][1] + 1))
        index = index + original_index - (reverse_count - 1) #attempt to adjust to altering window sizes
        iteration = iteration + 1
        count = count - 1
        reverse_count = reverse_count + 1
    array.append((array[len(array) - 1][0], array[len(array) - 1][1] + 1))
    array.append((array[len(array) - 1][0] + 1, array[len(array) - 1][1]))
    print("Window Set:", array)
    return array

# calculate similarities between two set of sentences within our window set
def similarity_calculations(array, line):
    sim = 0
    for index in range(len(array)):
        query = line[array[index][0]]
        query_vec = sbert_model.encode([query])[0]
        sim = sim + (1 - scipy.spatial.distance.cosine(query_vec, sbert_model.encode([line[array[index][1]]])[0]))
    return sim/len(array)

def generate_graph(line, filename):
    # set window size
    window = 5
    sentence_pairs_array = []
    average_similarity_array = []

    iteration = 0
    iteration_array = []

    phase_0_sentence = sbert_model.encode(["Irrelevant to Task: Google Docs, PDF, hear, shift key, hello"])[0]
    print("Length of Phase 0 sentence:", len(phase_0_sentence))
    phase_1_sentence = sbert_model.encode(["Reaching shore – how they will get the rescuers to the church: aircrafts, boats, airports, army base, fog"])[0]
    phase_2_sentence = sbert_model.encode(["Reaching the church – how they will evacuate the Red Cross workers: ground transportation, cars, trucks, donkeys, rebels, volcanos, personnel"])[0]
    phase_3_sentence = sbert_model.encode(["Returning – how they will return to either an Army base or aircraft carrier: injuries, army base, aircraft carrier"])[0]
    test_sentence = sbert_model.encode(["Hi", "Hello"])[0]
    test_sentence_1 = sbert_model.encode(["HiHello"])[0]
    if set(test_sentence_1) - set(test_sentence) == []:
        print("Reached Here")
    print("Length of Test sentence:", len(test_sentence)) 

    phase_0_array = []
    phase_1_array = []
    phase_2_array = []
    phase_3_array = []

    phases_similarity_array = []
    window_phases_array = []

    phase_0_words = ["Google Docs", "PDF", "hear", "shift key", "hello"]
    phase_1_words = ["aircrafts", "boats", "airports", "fog", "army base"]
    phase_2_words = ["ground transportation", "cars", "trucks", "donkeys", "rebel", "volcanos", "personnel"]
    phase_3_words = ["injuries", "aircraft carrier", "army base"]

    x_bert_coordinates = []
    y_bert_coordinates = []
    y_human_coordinates = []
    
    # after initial stages gbthnyjmkmbdgbt
    is_zero = True 

    print("Length of line:", len(line))
    while iteration < len(line) - window + 1 - 1: # don't evaluate last line --> extra - 1
        print("Line 1 :", line[iteration + 1])
        print("Line 2 :", line[iteration + 2])
        print("Line 3 :", line[iteration + 3])
        print("Line 4 :", line[iteration + 4])
        print("Line 5 :", line[iteration + 5])
        new_line = line[iteration + 1] + line[iteration + 2] + line[iteration + 3] + line[iteration + 4] + line[iteration + 5]
        if window > 2:
            if iteration == 0:
                print(type(line[iteration]))
                for i in range(0, window):
                    for j in range(0, window):
                        if i < j:
                            sentence_pairs_array.append((i, j))
                            
                # iteration + 1: iteration + window + 1 original
                
                '''
                if is_zero:
                    phases_similarity_array = [1 - scipy.spatial.distance.cosine(phase_0_sentence, sbert_model.encode([line[iteration + 1: iteration + window + 1]])[0]),
                                                 1 - scipy.spatial.distance.cosine(phase_1_sentence, sbert_model.encode([line[iteration + 1: iteration + window + 1]])[0]),
                                                 1 - scipy.spatial.distance.cosine(phase_2_sentence, sbert_model.encode([line[iteration + 1: iteration + window + 1]])[0]),
                                                 1 - scipy.spatial.distance.cosine(phase_3_sentence, sbert_model.encode([line[iteration + 1: iteration + window + 1]])[0])]
                else:
                    phases_similarity_array = [1 - scipy.spatial.distance.cosine(phase_1_sentence, sbert_model.encode([line[iteration + 1: iteration + window + 1]])[0]),
                                                 1 - scipy.spatial.distance.cosine(phase_2_sentence, sbert_model.encode([line[iteration + 1: iteration + window + 1]])[0]),
                                                 1 - scipy.spatial.distance.cosine(phase_3_sentence, sbert_model.encode([line[iteration + 1: iteration + window + 1]])[0])]
                                                 
                '''
                
                if is_zero:
                    phases_similarity_array = [1 - scipy.spatial.distance.cosine(phase_0_sentence, sbert_model.encode([new_line])[0]),
                                                 1 - scipy.spatial.distance.cosine(phase_1_sentence, sbert_model.encode([new_line])[0]),
                                                 1 - scipy.spatial.distance.cosine(phase_2_sentence, sbert_model.encode([new_line])[0]),
                                                 1 - scipy.spatial.distance.cosine(phase_3_sentence, sbert_model.encode([new_line])[0])]
                else:
                    phases_similarity_array = [1 - scipy.spatial.distance.cosine(phase_1_sentence, sbert_model.encode([new_line])[0]),
                                                 1 - scipy.spatial.distance.cosine(phase_2_sentence, sbert_model.encode([new_line])[0]),
                                                 1 - scipy.spatial.distance.cosine(phase_3_sentence, sbert_model.encode([new_line])[0])]
                    
                # window_phases_array.append(phases_similarity_matrix[len(phases_similarity_matrix) - 1].index(max(phases_similarity_matrix[len(phases_similarity_matrix) - 1])))

                # print("Sentence Pairs Array:", sentence_pairs_array)
                average_similarity_array.append(similarity_calculations(sentence_pairs_array, line))
            else:
                for i in range(0, window - 1):
                    sentence_pairs_array.pop(0)
                sentence_pairs_array.append(retrieve_next_sentence_array(iteration, window - 2, sentence_pairs_array))
                # likes to add [...]
                sentence_pairs_array.pop()
                average_similarity_array.append(similarity_calculations(sentence_pairs_array, line))

                # get rid of first line of matrix, since no longer relevant
                # phases_similarity_array.pop(0)
                if is_zero:
                    phases_similarity_array = [1 - scipy.spatial.distance.cosine(phase_0_sentence, sbert_model.encode([new_line])[0]),
                                                 1 - scipy.spatial.distance.cosine(phase_1_sentence, sbert_model.encode([new_line])[0]),
                                                 1 - scipy.spatial.distance.cosine(phase_2_sentence, sbert_model.encode([new_line])[0]),
                                                 1 - scipy.spatial.distance.cosine(phase_3_sentence, sbert_model.encode([new_line])[0])]
                else:
                    phases_similarity_array = [1 - scipy.spatial.distance.cosine(phase_1_sentence, sbert_model.encode([new_line])[0]),
                                                 1 - scipy.spatial.distance.cosine(phase_2_sentence, sbert_model.encode([new_line])[0]),
                                                 1 - scipy.spatial.distance.cosine(phase_3_sentence, sbert_model.encode([new_line])[0])]
                

                # window_phases_array.pop(0)
                # window_phases_array.append(phases_similarity_matrix[len(phases_similarity_matrix) - 1].index(max(phases_similarity_matrix[len(phases_similarity_matrix) - 1])))

        else:
            query_prev_sent = sbert_model.encode(line[iteration - 1])
            query_curr_sent = sbert_model.encode(line[iteration])
            average_similarity_array.append(1 - scipy.spatial.distance.cosine(query_prev_sent, query_curr_sent))
            # modify this to incorporate phases_similarity_array if end up testing window = 2 

        print("Phases Similarity Array:", phases_similarity_array)
        print("Maximum of Phases Similarity Array:", max(phases_similarity_array))
        print("Index of Maximum of Phases Similarity Array:", phases_similarity_array.index(max(phases_similarity_array)))
        
        if is_zero:    
            if phases_similarity_array.index(max(phases_similarity_array)) == 0: 
                phase_0_array.append(iteration)
            elif phases_similarity_array.index(max(phases_similarity_array)) == 1: 
                phase_1_array.append(iteration)
                is_zero = False
            elif phases_similarity_array.index(max(phases_similarity_array)) == 2: 
                phase_2_array.append(iteration)
                is_zero = False
            else:
                phase_3_array.append(iteration)
                is_zero = False
        else:
            if phases_similarity_array.index(max(phases_similarity_array)) == 0: 
                phase_1_array.append(iteration)
            elif phases_similarity_array.index(max(phases_similarity_array)) == 1: 
                phase_2_array.append(iteration)
            else:
                phase_3_array.append(iteration)
            
            
        
        '''
        sum_phase_similarities = phases_similarity_array + sum_phase_similarities
        
        if sum_phase_similarities.index(max(sum_phase_similarities)) == 0: 
            phase_0_array.append(iteration)
        elif sum_phase_similarities.index(max(sum_phase_similarities)) == 1: 
            phase_1_array.append(iteration)
        elif sum_phase_similarities.index(max(sum_phase_similarities)) == 2: 
            phase_2_array.append(iteration)
        else:
            phase_3_array.append(iteration)
        '''
            
        iteration_array.append(iteration)
        iteration = iteration + 1

    print("Average Similarity Array:", average_similarity_array)

    plt.plot(iteration_array, average_similarity_array)
    plt.ylim(0, 1)

    print("phase_0_array:", phase_0_array)
    print("phase_1_array:", phase_1_array)
    print("phase_2_array:", phase_2_array)
    print("phase_3_array:", phase_3_array)

    for index in range(len(phase_0_array)):
        if index == 0:
            plt.axvline(x = phase_0_array[index], ymax = average_similarity_array[phase_0_array[index]], color='black', label = 'Phase 0')
        else:
            plt.axvline(x = phase_0_array[index], ymax = average_similarity_array[phase_0_array[index]], color='black')
    for index in range(len(phase_1_array)):
        if index == 0:
            plt.axvline(x = phase_1_array[index], ymax = average_similarity_array[phase_1_array[index]], color='red', label = 'Phase 1')
        else:
            plt.axvline(x = phase_1_array[index], ymax = average_similarity_array[phase_1_array[index]], color='red')
    for index in range(len(phase_2_array)):
        if index == 0:
            plt.axvline(x=phase_2_array[index], ymax=average_similarity_array[phase_2_array[index]],
                        color='yellow', label='Phase 2')
        else:
            plt.axvline(x=phase_2_array[index], ymax=average_similarity_array[phase_2_array[index]],
                        color='yellow')
    for index in range(len(phase_3_array)):
        if index == 0:
            plt.axvline(x=phase_3_array[index], ymax=average_similarity_array[phase_3_array[index]],
                        color='cyan', label='Phase 3')
        else:
            plt.axvline(x=phase_3_array[index], ymax=average_similarity_array[phase_3_array[index]],
                        color='cyan')

    plt.legend()

    plt.xlabel('Window Number')
    plt.ylabel('Similarity')
    plt.title(filename + " Similarity")
    plt.savefig(filename + " NLI - 5in1" + ".png")
    plt.clf()


    '''
    phase_0 = False
    phase_1 = False
    phase_2 = False
    phase_3 = False

    phase_index = 0

    while not phase_0 and phase_index < len(phase_0_words):
        if phase_0_words[phase_index] in line[iteration]:
            phase_0 = True
        phase_index = phase_index + 1

    phase_index = 0

    while not phase_1 and phase_index < len(phase_1_words):
        if phase_1_words[phase_index] in line[iteration]:
            phase_1 = True
        phase_index = phase_index + 1

    phase_index = 0

    while not phase_2 and phase_index < len(phase_2_words):
        if phase_2_words[phase_index] in line[iteration]:
            phase_2 = True
        phase_index = phase_index + 1

    phase_index = 0

    while not phase_3 and phase_index < len(phase_3_words):
        if phase_3_words[phase_index] in line[iteration]:
            phase_3 = True
        phase_index = phase_index + 1

    if not phase_0 and not phase_1 and not phase_2 and not phase_3:
        if iteration == 0:
            y_human_coordinates.append(0)
        else:
            y_human_coordinates.append(y_human_coordinates[len(y_human_coordinates) - 1])
    elif phase_0 and not phase_1 and not phase_2 and not phase_3:
        y_human_coordinates.append(0)
    elif not phase_0 and phase_1 and not phase_2 and not phase_3:
        y_human_coordinates.append(1)
    elif not phase_0 and not phase_1 and phase_2 and not phase_3:
        y_human_coordinates.append(2)
    elif not phase_0 and not phase_1 and not phase_2 and phase_3:
        y_human_coordinates.append(3)
    else:
        if iteration == 0:
            y_human_coordinates.append(0)
        else:
            y_human_coordinates.append(y_human_coordinates[len(y_human_coordinates) - 1])
            
    


    # print("BERT coordinates:", bert_coordinates)
    
    '''

    '''

    figure, axs = plt.subplots(2)
    figure.suptitle(filename + " - BERT vs Human Coding Results")

    # ax1 = figure.add_subplot(221)
    # ax2 = figure.add_subplot(222, sharex = ax1, sharey = ax1)


    axs[0].scatter(x_bert_coordinates, y_bert_coordinates, color = 'orange', s = 3)

    for index in range(len(x_bert_coordinates) - 1):
        if (y_bert_coordinates[index] == y_bert_coordinates[index + 1]):
            axs[0].plot(x_bert_coordinates[index:index+2], y_bert_coordinates[index:index+2], color = 'orange', s = 3)

    for index in range(len(x_bert_coordinates)):
        if y_bert_coordinates[index] == y_human_coordinates[index]:
            axs[0].plot(x_bert_coordinates[index], y_bert_coordinates[index], color = 'black', s = 3)

    axs[1].scatter(x_bert_coordinates, y_human_coordinates, color='purple', s = 3)

    for axis in [axs[1].xaxis, axs[1].yaxis]:
        axis.set_major_locator(ticker.MaxNLocator(integer=True))

    for index in range(len(x_bert_coordinates) - 1):
        if (y_human_coordinates[index] == y_human_coordinates[index + 1]):
            axs[1].plot(x_bert_coordinates[index:index + 2], y_human_coordinates[index:index + 2], color='purple', s = 3)

    for index in range(len(x_bert_coordinates)):
        if y_bert_coordinates[index] == y_human_coordinates[index]:
            axs[1].plot(x_bert_coordinates[index], y_bert_coordinates[index], color = 'black', s = 3)

    # plt.plot(x_bert_coordinates, y_bert_coordinates)
    plt.savefig(filename + "-" + "BERT vs Human coding - STSb" + ".png")
    plt.clf()
    '''


## sources
#https://www.youtube.com/watch?v=Q2NtCcqmIww
#https://www.analyticsvidhya.com/blog/2020/08/top-4-sentence-embedding-techniques-using-python/
#https://docs.google.com/spreadsheets/d/14QplCdTCDwEmTqrn1LH4yrbKvdogK4oQvYO1K1aPR5M/edit#gid=0
#https://stackoverflow.com/questions/14793516/how-to-produce-multiple-modes-in-python

def utterances_examined(file):
    print("Filename:", file)
    os.chdir("/Users/sonajain/Desktop/PycharmProjects/HML/Final Project/Content + Flow/Final Project Excel Docs and Code")
    print("Directory:", os.getcwd())
    file_contents = pandas.read_excel(file)
    speaker = file_contents['Speaker']
    line = file_contents['Turn']
    print(line[0])
    line_set = []

    for index in range(len(line)):
        line_set.append(line[index])

    generate_graph(line_set, str(file[0:len(file) - 5]))
    
print("Hi")
file_list = []
directory = os.path.normpath("/Users/sonajain/Desktop/PycharmProjects/HML/Final Project/Content + Flow/Final Project Excel Docs and Code")
for subdir, dirs, files in os.walk(directory):
    for file in files:
        if file.endswith(".xlsx") and file.count("~$") == 0:
            file.encode("utf-8")
            file_list.append(file)


for index in range(len(file_list)):
    print(file_list[index])
    # print(str(file_list[index][0:len(file_list[index]) - 5]))
    # if file_list[index] == "Team 20 - Participants Only.xlsx":
    if file_list[index].count("Team 3") == 1 or file_list[index].count("Team 20") == 1:
        utterances_examined(file_list[index])
